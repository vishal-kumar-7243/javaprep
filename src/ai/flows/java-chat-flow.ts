
'use server';
/**
 * @fileOverview A chatbot flow for JavaPrep to assist users.
 *
 * - javaChatFlow - A function that handles the chat interaction.
 * - JavaChatInput - The input type for the javaChatFlow function.
 * - JavaChatOutput - The return type for the javaChatFlow function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'zod';

const JavaChatInputSchema = z.object({
  userInput: z.string().describe('The message sent by the user.'),
  // Optional: Add chatHistory here in the future if needed
  // chatHistory: z.array(z.object({
  //   role: z.enum(['user', 'model']),
  //   parts: z.array(z.object({ text: z.string() })),
  // })).optional().describe('The history of the conversation so far.'),
});
export type JavaChatInput = z.infer<typeof JavaChatInputSchema>;

const JavaChatOutputSchema = z.object({
  botResponse: z.string().describe('The response generated by the AI assistant.'),
});
export type JavaChatOutput = z.infer<typeof JavaChatOutputSchema>;

export async function javaChatFlow(input: JavaChatInput): Promise<JavaChatOutput> {
  // For now, directly call the flow. In the future, you might add pre-processing for history.
  return javaChatGenkitFlow(input);
}

const prompt = ai.definePrompt({
  name: 'javaChatPrompt',
  input: {schema: JavaChatInputSchema},
  output: {schema: JavaChatOutputSchema},
  prompt: `You are JavaPrepBot, a friendly and knowledgeable AI assistant for the JavaPrep website.
Your primary goal is to help students learn Java concepts for their semester exams.
You should be able to:
- Explain Java concepts clearly and concisely.
- Provide examples when appropriate.
- Guide users on how to find information on the JavaPrep website (e.g., "You can find details about Inheritance in Unit 2.").
- Answer questions related to the Java syllabus covered on the website.
- If a question is outside your scope or too complex, politely state that you cannot answer or suggest consulting their course materials.
- Keep responses helpful and focused on Java education.

User's question: {{{userInput}}}
`,
});

const javaChatGenkitFlow = ai.defineFlow(
  {
    name: 'javaChatGenkitFlow',
    inputSchema: JavaChatInputSchema,
    outputSchema: JavaChatOutputSchema,
  },
  async (input) => {
    const {output} = await prompt(input);
    if (!output) {
      // Handle cases where the model might not return structured output as expected
      // This is a fallback, ideally the model respects the output schema.
      const fallbackResponse = await ai.generate({
        prompt: `You are JavaPrepBot, a friendly and knowledgeable AI assistant for the JavaPrep website.
        User's question: ${input.userInput}
        Respond to the user's question about Java or the JavaPrep syllabus. If you cannot answer, say so politely.`,
      });
      return { botResponse: fallbackResponse.text ?? "I'm sorry, I couldn't process that request." };
    }
    return output;
  }
);
